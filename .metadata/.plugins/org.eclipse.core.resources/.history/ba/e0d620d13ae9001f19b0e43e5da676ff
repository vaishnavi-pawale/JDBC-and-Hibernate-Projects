package com.Service;

import java.util.Arrays;
import java.util.Scanner;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.query.Query;
import org.hibernate.service.Service;

import com.Entity.Adhar;
import com.Entity.Person;
import com.Util.HibernateUtil;

import antlr.collections.List;

public class ServiceIMPL implements com.Service.Service {

	SessionFactory sf = HibernateUtil.getConnection();
	Scanner sc = new Scanner(System.in);

	@Override
	public void registerPersonWithAdhar() {
		Scanner sc = new Scanner(System.in);
		Session session = sf.openSession();
		System.out.println("How many Persons You want to add :- ");
		int n = sc.nextInt();
		for (int i = 1; i <= n; i++) {
			Person p = new Person();
			System.out.println("Enter the Person Name :- ");
			p.setPname(sc.next());

			System.out.println("ENter the Person Address :- ");
			p.setPaddress(sc.next());

			System.out.println("Enter the person Age :- ");
			p.setAge(sc.nextInt());

			Adhar ad = new Adhar();
			System.out.println("Enter the Adhar Number :- ");
			ad.setAdharNo(sc.next());

			p.setAdhar(ad);

			session.save(p);

			session.beginTransaction().commit();
			System.out.println("Person added with adhar");

		}

	}

	@Override
	public void displayPersonDetailsOnly() {
		Scanner sc = new Scanner(System.in);
		Session s = sf.openSession();
		Query query = s.createQuery("select pid,pname,paddress,Age from Person");
		java.util.List<Object[]> allPersons = query.getResultList();
		for (Object[] obj : allPersons) {
			System.out.println(Arrays.toString(obj));
		}

	}

	@Override
	public void displayAdharDetailsOnly() {
		Scanner sc = new Scanner(System.in);
		Session s = sf.openSession();
		Query query = s.createQuery("select aid,adharNo from Adhar");
		java.util.List<Object[]> allPersons = query.getResultList();
		for (Object[] obj : allPersons) {
			System.out.println(Arrays.toString(obj));
		}
	}

	@Override
	public void updatePersonDetailsOnly() {
		Session s = sf.openSession();
		System.out.println("Enter the Person's Id:-");
		int id = sc.nextInt();
		Person person = s.get(Person.class, id);

		boolean flag = true;
		while(flag) {
			System.out.println("Choose a option Which You want to Update");
			System.out.println("1. Name\n2. Address\n3. Age\n4. Exit");
			System.out.println("Enter the option btween 1 - 4:-");
			int choice = sc.nextInt();
			switch (choice) {
			case 1:
				
				System.out.println("Enter the New name :- ");
				person.setPname(sc.next());
				
				break;
			case 2:
				System.out.println("Enter the New Address:- ");
				person.setPaddress(sc.next());
				break;

			case 3:
				System.out.println("Enter the New age :- ");
				person.setAge(sc.nextInt());
				break;

			case 4:
				flag = false;
				break;

			default:
				System.out.println("Enter the valid Option!!!");
				break;
			}
		}
		

	}

	@Override
	public void updateAdharDetailsOnly() {
		// TODO Auto-generated method stub

	}

	@Override
	public void deletePersonOnly() {
		// TODO Auto-generated method stub

	}

	@Override
	public void deleteAdharOnly() {
		// TODO Auto-generated method stub

	}

	@Override
	public void deletePersonWithAdhar() {
		// TODO Auto-generated method stub

	}

}
